/****************************** SEARCH EXTENSION ******************************/
/* Implements an extension to the search page which allows users to           */
/* constrain their searches by user.                                          */
/******************************************************************************/
delOnEvent("Control/Search", "show", "search()");
delOnEvent("Control/Search/Entity_Types"  , "click" , "search()");

addOnEvent("Control/Search", "show", "populateSelectUser()");
addOnEvent("Control/Search", "show", "populateSquare()");

void populateSelectUser(){
  String refSearchUsers = "Control/Search/Select_User";
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null "+
                                   " UNION " +
                                   "SELECT -1, '{All}'";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(refSearchUsers, result, false);
    }
  });
}

void populateSquare() {
  String refSquare = "Control/Search/Select_Square";

  String q = "";
  q += " SELECT DISTINCT measure, measure";
  q += "            FROM latestNonDeletedAentvalue";
  q += "            JOIN attributekey USING (attributeid)";
  q += "           WHERE attributename IN " + ATTRIBS_SQUARE_ID;
  q += "             AND measure IS NOT NULL";

  FetchCallback popSquare = new FetchCallback() {
    onFetch(result) {
      if (isNull(result)) return;

      // Add the option 'All' at the top of the list
      List all = new ArrayList();
      all.add("\\0");
      all.add("{All}");

      result.add(0, all);

      // Populate dropdown
      populateDropDown(refSquare, result, false);
    }
  };

  fetchAll(q, popSquare);
}

// Overrides auto-generated definition
void search(){
  String tabgroup = "Control";
  String refEntityList  = tabgroup + "/Search/Entity_List";
  String refSearchTerm  = tabgroup + "/Search/Search_Term";
  String refEntityTypes = tabgroup + "/Search/Entity_Types";
  String refSelectUser  = tabgroup + "/Search/Select_User";
  String refSelectSqar  = tabgroup + "/Search/Select_Square";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String user = getFieldValue(refSelectUser);
  String name = getFieldValue(refSelectSqar);//Square ID
  //System.out.println(name);
  if (isNull(user)) return;
  String searchQuery = "SELECT uuid, response " +
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  " +
                       " WHERE uuid in (SELECT uuid " +
                       "                  FROM latestNonDeletedArchEntIdentifiers " +
                       "                 WHERE measure LIKE '{term}%'  " +
                       "                   AND ( aenttypename LIKE '{type}' OR '' = '{type}' ) " +
                       "                   AND ( userid = {user} OR -1 = {user}) " +
                       "                ) " +
                       "  AND  ( " +
                       "           '{name}' = '\\0' OR" +
                       "           uuid IN (" +
                       "            SELECT uuid" +
                       "              FROM latestnondeletedaentvalue" +
                       "              JOIN attributekey USING (attributeid)" +
                       "             WHERE attributename IN " + ATTRIBS_SQUARE_ID +
                       "               AND measure = '{name}'" +
                       "           )" +
                       "       )" +
                       " ORDER BY response " +
                       " LIMIT ? " +
                       "OFFSET ? ";
  searchQuery = replaceFirst(searchQuery, "{term}", term);
  searchQuery = replaceFirst(searchQuery, "{type}", type);
  searchQuery = replaceFirst(searchQuery, "{type}", type);
  searchQuery = replaceFirst(searchQuery, "{user}", user);
  searchQuery = replaceFirst(searchQuery, "{user}", user);
  searchQuery = replaceFirst(searchQuery, "{name}", name);
  searchQuery = replaceFirst(searchQuery, "{name}", name);

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS(tabgroup);

  Log.d("Module", "Search query: " + searchQuery);
}
